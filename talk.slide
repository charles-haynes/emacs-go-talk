Configuring Emacs for Go
6 October 2015

Charles Haynes
ceh@ceh.bz

* Not just Emacs!

* Wall of tools

[[https://golang.org/cmd/go/#hdr-Compile_and_install_packages_and_dependencies][go install]] - not `go`build` caches intermediate results
[[https://golang.org/cmd/go/#hdr-Run_gofmt_on_package_sources][gofmt]] - pretty print everything, always
[[https://godoc.org/golang.org/x/tools/cmd/goimports][goimports]] - `gofmt` plus import management
[[https://golang.org/cmd/vet][go vet]] - find suspicious code
[[https://golang.org/cmd/go/#hdr-Test_packages][go test [-cover]]] - run your tests [with coverage analysis]
[[https://github.com/golang/lint][golint]] - opinionated style checker
[[https://github.com/kisielk/errcheck][errcheck]] - find ignored error returns
[[https://github.com/rogpeppe/godef][godef]] - show where a symbol is defined
[[https://golang.org/cmd/go/#hdr-Show_documentation_for_package_or_symbol][go doc]] - show package and name documentation
[[https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view][oracle]] - answer questions about your code
[[https://blog.golang.org/generate][go generate]] - automatic code generation

[[https://git-scm.com/doc][git]] - everyone's favorite distributed version control system

and the [[http://play.golang.org/][go playground]]

* go install

If you're still using `go`run` or `go`build` you should switch to using
`go`install` for everything. It caches intermediate results greatly speeding
up your builds.

We modify Emacs's default `compile` command when in `go-mode` to use
`go`install`.

.code .emacs.d/my-lisp/hooks.el /Customize compile command/,/go vet/

Invoke it with

    M-x compile

* gofmt

Everyone should know about `gofmt`. It is the canonical pretty printer.
All go code should be formatted using `gofmt`

Run `gofmt` on every file save.

In your go-mode-hook

.code .emacs.d/my-lisp/hooks.el /Call Gofmt/,/gofmt-before-save/

Invoke it by saving a go source file.

* goimports

I lied.  Don't use `gofmt` use `goimports`. It formats your code like
`gofmt` does, and also manages your imports.  It adds missing imports,
removes unused imports, and put imports in order.

.code Dockerfile /# golang.org tools/,/oracle/

In your Customizations file

.code .emacs.d/my-lisp/custom.el /gofmt-command/

Invoke it by saving a go source file.

* go vet

`go`vet` checks your code for suspicious code that may not be caught by a
compiler. It's intended to find errors but not everything it finds may be an
actual error.

We've added go vet to the `compile` command.

.code .emacs.d/my-lisp/hooks.el /Customize compile command/,/go vet/

Invoke it with

    M-x compile

* go test

`go`test` runs your tests. You should always have tests. We will run tests on
every `compile`, and also integrate coverage analysis using the `go-coverage`
command.

We've added go test to the `compile` command.

.code .emacs.d/my-lisp/hooks.el /Customize compile command/,/go vet/

Invoke it with

    M-x compile

* go test -cover and go-coverage

`go-coverage` is part of `go-mode` First create a test coverage file using
`go`test`-coverprofile=cover.out` then run

    M-x go-coverage

in the buffer you want to see the coverage of. It will prompt you for
the coverage file (`cover.out` in this case) and open a cloned buffer
with visual display of coverage. This buffer is fully a fully functional
buffer visiting the same file.

* golint

`golint` is a style checker. It's more than just a pretty printer, and it finds
things that aren't strictly logic errors, and so aren't appropriate for `go`vet`
It's quite opinionated, and you should not treat everything it says as gospel.

It tries to implement suggestions from [[https://golang.org/doc/effective_go.html][Effective Go]] and [[https://github.com/golang/go/wiki/CodeReviewComments][Go Code Review Comments]]

It is automatically used by `flycheck` if it's present

.code Dockerfile /# third party tools/,/godef/

* errcheck
`errcheck` checks specifically for ignored error returns.

    func functionThatReturnsAnError() error {
         return nil
     }

     functionThatReturnsAnError()

Automatically used by `flycheck` if `errcheck` is installed.

.code Dockerfile /# third party tools/,/godef/

* godef

Shows you where a symbol is defined.

To use it, put point on the symbol of interest and invoke it with

    M-.

to get back, use

    M-*

to invoke `pop-tag-mark`

.code Dockerfile /# third party tools/,/godef/

* godoc

`godoc` from the command line will print the documentation for a
command, package, or name in a package. `go-mode` binds it to `godoc`
and `godoc-at-point` Invoke it by putting point on a symbol you're interested
in then

   M-x godoc-at-point

.code Dockerfile /# golang.org tools/,/oracle/

* oracle

`oracle` is a sophisticated source analysis tool that can answer
various questions about go programs: `callees`, `callers`,
`callstack`, `definition`, `describe`, `freevars`, `implements`,
`peers`, `referrers`, and `what`

`go-mode` binds oracle commands to various `C-c`C-o` prefix commands to answer
questions about the code at the current position.

.code Dockerfile /# golang.org tools/,/oracle/

* git

`git` is everyone's favorite distributed version control system.

We integrate `git` with emacs using `magit` and bind it to

    C-x g

A full discussion of `magit` is a talk in and of itself, the short
version is that `magit` lets you use the full power of git from within
emacs, in an "emacsy" way.

* go playground

The go playground is a place to try code out and share code with other people.
`go-mode` adds three commands to emacs to make using the playground easier.
`go-play-buffer` sends the current buffer to the playground, `go-play-region`
does the same thing for a region. `go-download-play` lets you directly download
a playground url into a new buffer.

* Emacs specific

* setup

[[https://github.com/rdallasgray/pallet][Pallet]] is a package manager for emacs, built on top of [[http://cask.readthedocs.org/en/latest/][Cask]]. It simplifies installing all the emacs packages we're using.

`Dockerfile`

.code Dockerfile /cask.git/

`.emacs.d/init.el`

.code .emacs.d/init.el /require 'cask/,/pallet-mode/

`.emacs.d/Cask`

.code .emacs.d/Cask /pallet/

* flycheck

[[https://github.com/flycheck/flycheck][flycheck]] is the best thing to happen to writing code in Emacs since the `compile` command. It does on the fly "syntax" checking of the current buffer. Syntax checkers can actually be anything that puts out a parseable filename/line number, and flycheck's [[http://www.flycheck.org/manual/latest/Supported-languages.html#Supported-languages][built in support for Go]] will invoke `gofmt`, `golint`, `go`vet`, `go`build` or `go`test` and `errcheck` if they are present.

It decorates the current buffer with information about any errors, and puts additional information in the echo area if you are on a region with an error.

* go-eldoc

[[https://github.com/syohex/emacs-go-eldoc][go-eldoc]] provides [[http://emacswiki.org/emacs/ElDoc][eldoc]]-like information about variables, functions, and arguments. It depends on `go-mode` and `gocode`

`Cask` file

.code .emacs.d/Cask /eldoc/

* yasnippet-go

People either love snippets or they hate them, if you like snippets [[https://github.com/dominikh/yasnippet-go][yasnippet-go]] is a package of snippet templates for [[https://github.com/capitaomorte/yasnippet][yasnippet]]. Install it by installing `yasnippet` in your Cask file

.code .emacs.d/Cask /yasnippet/

Then cloning the repo into a directory in your `.emacs.d`

.code Dockerfile /yasnippet/

Then customizing yasnippet to know about the go repo in your customization file

.code .emacs.d/my-lisp/custom.el /yas/,/yasnippet-go/

[[https://github.com/atotto/yasnippet-golang][atotto/yasnippet-golang]] is another set of snippets for go.

* go-mode

[[https://github.com/dominikh/go-mode.el][go-mode]] is the main mechanism for customizing emacs to edit go code. It provides

- syntax highlighting
- prog mode (indentation, maniupulation of comments, navigation by function etc)
- beginning-of-defun (C-M-a)
- end-of-defun (C-M-e)

As already mentioned, it integrates with gofmt, godoc, Playground, godef, and go-coverage
It also provides integration with imenu and provides tools for managing imports.

* go-mode cont.

To install it, in your Cask file

.code .emacs.d/Cask /go-mode/

Then set up a go-mode hook to configure it:

.code .emacs.d/my-lisp/hooks.el /go-mode/,/add-hook 'go-mode-hook/

* Links

[[http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/]]
[[https://github.com/dominikh/go-mode.el]]
[[http://andrewjamesjohnson.com/configuring-emacs-for-go-development/]]

* Slides and resources

This presentation is [[https://go-talks.appspot.com/github.com/charles-haynes/emacs-go-talk/talk.slide][available online]]  and the source repo is [[https://github.com/charles-haynes/emacs-go-talk][available on github]]. It includes a [[https://github.com/charles-haynes/emacs-go-talk/blob/master/Dockerfile][Docker file]] for building a working emacs with all of the tools from this talk installed and working. The docker image is also available on docker-hub.
