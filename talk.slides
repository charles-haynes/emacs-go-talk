go-mode
        syntax highlighting
        prog mode (indentation, maniupulation of comments, navigation by function etc)
        beginning-of-defun (C-M-a)
        end-of-defun (C-M-e)

        Integration with gofmt
                    providing a command of the same name, 
                    gofmt-before-save, which can be used in a hook to format Go buffers before saving them.
                    Setting the gofmt-command variable also allows using goimports.

        Integration with godoc via the functions godoc and godoc-at-point.
                    [no bindings]
                    godoc
                    godoc-at-point

        Integration with the Playground
                    go-play-buffer and go-play-region to send code to the Playground
                    go-download-play to download a Playground entry into a new buffer

        Managing imports
                A function for jumping to the file's imports (go-goto-imports)
                A function for adding imports, including tab completion (go-import-add, bound to C-c C-a)
                A function for removing or commenting unused imports (go-remove-unused-imports)

        Integration with godef
                    godef-describe (C-c C-d) to describe expressions
                    godef-jump (C-c C-j) and godef-jump-other-window (C-x 4 C-c C-j) to jump to declarations
                    This requires you to install godef via go get github.com/rogpeppe/godef.
                    [Bound M-. to godef-jump, note M-* gets you back]

        Basic support for imenu (functions and variables)
              jump to function
              jump to type

        Built-in support for displaying code coverage as calculated by go test (go-coverage)

F10 to get menu

http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/
https://github.com/syohex/emacs-go-eldoc

magit
        [bound to C-x g]

go-eldoc
        depends on gocod and go-mode

go oracle
   Set the oracle analysis scope
   From within emacs, open $GOPATH/src/github.com/tleyden/checkers-bot-minimax/thinker.go
   You need to tell Go Oracle the main package scope under which you want it to operate:
   M-x go-oracle-set-scope
   it will prompt you with:
   Go oracle scope:
   and you should enter:
   github.com/tleyden/checkers-bot-minimax and hit Enter.
   Nothing will appear to happen, but now Go Oracle is now ready to show itâ€™s magic. (note it will not autocomplete packages in this dialog, which is mildly annoying. Make sure to spell them correctly.)
   Important: When you call go-oracle-set-scope, you always need to give it a main package. This is something that will probably frequently trip you up while using Go Oracle.
